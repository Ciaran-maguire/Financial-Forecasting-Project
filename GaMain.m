function [fittest] = GaMain(len,training,test)population = 0;[length,~] = size(population)% ensure population is not less than 2while length < 2% creates a population of p,d,q solutionspopulation = randi([0,9],30,3);population = [zeros(size(population,1),1) population];population(:,[1 4]) = population(:,[4 1]);population = [zeros(size(population,1),1) population];% checks that the paramters produce finite modelspopulation = InversionCheck(population, training);% initial fittness classificationpopulation = Fitness(population,training,test,len);j = 1;    while j <= length        if population(j,1) <= 20            population(j,:) = [];            [length,~] = size(population);            j= j-1;        end            j = j + 1;    endend% mimimum fitness scorep = 0.5;%Repeats algorithmn n timesn = 50;for i = 1:n        % Removes genes with a zero or lower fitness score    [lengthl,~] = size(population);    j = 1;    while j <= lengthl        if population(j,1) <= p            population(j,:) = [];            [lengthl,~] = size(population);            j= j-1;        end            j = j + 1;    end        %finds 2 fittest chromosomes    [selected,population]= Selection(population);    crossed = Crossover(selected);        % "rolls dice for mutation chances    r = randi([1 100]);        % 7 percent chance to mutate    if r <= 7        select = randi([1 2]);        switch (select)            case 1                crossed(1,:) = Mutation(crossed(1,:));                                            case 2                crossed(2,:) = Mutation(crossed(2,:));                                        end    end    % adds children and mutated back into population    [length,~] = size(population);    length = length + 1;        population(length,:) = crossed(1,:);    length = length + 1;            population(length,:) = crossed(2,:);        %Checks that the newly added children produce finite models    population = InversionCheck(population,training);    %calculates fitness    population = Fitness(population,training,test,len);      % Increases minimum Fitness    p = p + 0.5;end% finds the fittest gene in the population[~,l] = size(population);fittest = population(1,:);for i = 1:l    fitness = population(i,1);        if fitness > fittest(1,1)        fittest = population(i,:);    endend